<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Language Translation Tool</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .translation-box {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            padding: 40px;
            animation: slideUp 0.5s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .language-selector {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            gap: 20px;
            flex-wrap: wrap;
        }

        .language-group {
            flex: 1;
            min-width: 200px;
        }

        .language-group label {
            display: block;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 0.95em;
        }

        .language-group select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 1em;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .language-group select:hover {
            border-color: #667eea;
        }

        .language-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .swap-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.5em;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            margin-top: 25px;
        }

        .swap-button:hover {
            transform: rotate(180deg) scale(1.1);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .swap-button:active {
            transform: rotate(180deg) scale(0.95);
        }

        .translation-area {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .translation-area {
                grid-template-columns: 1fr;
            }
        }

        .text-box {
            display: flex;
            flex-direction: column;
        }

        .text-box-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .text-box-header h3 {
            color: #333;
            font-size: 1.1em;
        }

        .icon-buttons {
            display: flex;
            gap: 8px;
        }

        .icon-btn {
            background: #f0f0f0;
            border: none;
            width: 35px;
            height: 35px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 1.2em;
        }

        .icon-btn:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
        }

        .icon-btn:active {
            transform: translateY(0);
        }

        .icon-btn.copied {
            background: #4caf50;
            color: white;
        }

        textarea {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 1em;
            font-family: inherit;
            resize: vertical;
            transition: all 0.3s ease;
        }

        textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .output-box {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 12px;
            min-height: 200px;
            border: 2px solid #e0e0e0;
            font-size: 1em;
            line-height: 1.6;
            color: #333;
            position: relative;
        }

        .output-box.loading {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .char-count {
            text-align: right;
            color: #999;
            font-size: 0.9em;
            margin-top: 8px;
        }

        .translate-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 12px;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            display: block;
            margin: 0 auto;
        }

        .translate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .translate-btn:active {
            transform: translateY(0);
        }

        .translate-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .error-message {
            background: #fee;
            color: #c33;
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            display: none;
            border-left: 4px solid #c33;
        }

        .error-message.show {
            display: block;
            animation: shake 0.5s ease;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .feature-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
        }

        .feature-icon {
            font-size: 3em;
            margin-bottom: 15px;
        }

        .feature-card h3 {
            color: #333;
            margin-bottom: 10px;
        }

        .feature-card p {
            color: #666;
            font-size: 0.95em;
        }

        .toast {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: #4caf50;
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            display: none;
            animation: slideIn 0.3s ease;
        }

        .toast.show {
            display: block;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
            }
            to {
                transform: translateX(0);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåç Language Translation Tool</h1>
            <p>Translate text between 20+ languages instantly</p>
        </div>

        <div class="translation-box">
            <div class="language-selector">
                <div class="language-group">
                    <label for="source-lang">Source Language</label>
                    <select id="source-lang">
                        <option value="en">English</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                        <option value="it">Italian</option>
                        <option value="pt">Portuguese</option>
                        <option value="ru">Russian</option>
                        <option value="ja">Japanese</option>
                        <option value="ko">Korean</option>
                        <option value="zh-CN">Chinese (Simplified)</option>
                        <option value="ar">Arabic</option>
                        <option value="hi">Hindi</option>
                        <option value="nl">Dutch</option>
                        <option value="pl">Polish</option>
                        <option value="tr">Turkish</option>
                        <option value="vi">Vietnamese</option>
                        <option value="th">Thai</option>
                        <option value="sv">Swedish</option>
                        <option value="no">Norwegian</option>
                        <option value="da">Danish</option>
                    </select>
                </div>

                <button class="swap-button" id="swap-btn" title="Swap Languages">‚áÑ</button>

                <div class="language-group">
                    <label for="target-lang">Target Language</label>
                    <select id="target-lang">
                        <option value="en">English</option>
                        <option value="es" selected>Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                        <option value="it">Italian</option>
                        <option value="pt">Portuguese</option>
                        <option value="ru">Russian</option>
                        <option value="ja">Japanese</option>
                        <option value="ko">Korean</option>
                        <option value="zh-CN">Chinese (Simplified)</option>
                        <option value="ar">Arabic</option>
                        <option value="hi">Hindi</option>
                        <option value="nl">Dutch</option>
                        <option value="pl">Polish</option>
                        <option value="tr">Turkish</option>
                        <option value="vi">Vietnamese</option>
                        <option value="th">Thai</option>
                        <option value="sv">Swedish</option>
                        <option value="no">Norwegian</option>
                        <option value="da">Danish</option>
                    </select>
                </div>
            </div>

            <div class="translation-area">
                <div class="text-box">
                    <div class="text-box-header">
                        <h3>Enter Text</h3>
                        <div class="icon-buttons">
                            <button class="icon-btn" id="speak-source" title="Listen">üîä</button>
                            <button class="icon-btn" id="clear-btn" title="Clear">üóëÔ∏è</button>
                        </div>
                    </div>
                    <textarea id="source-text" placeholder="Type or paste your text here..."></textarea>
                    <div class="char-count" id="char-count">0 characters</div>
                </div>

                <div class="text-box">
                    <div class="text-box-header">
                        <h3>Translation</h3>
                        <div class="icon-buttons">
                            <button class="icon-btn" id="speak-target" title="Listen">üîä</button>
                            <button class="icon-btn" id="copy-btn" title="Copy">üìã</button>
                        </div>
                    </div>
                    <div class="output-box" id="output-text">Translation will appear here...</div>
                </div>
            </div>

            <button class="translate-btn" id="translate-btn">Translate</button>

            <div class="error-message" id="error-message"></div>
        </div>

        <div class="features">
            <div class="feature-card">
                <div class="feature-icon">‚ö°</div>
                <h3>Instant Translation</h3>
                <p>Fast and accurate translations powered by Google Translate API</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üîä</div>
                <h3>Text-to-Speech</h3>
                <p>Listen to pronunciations in native accents</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üìã</div>
                <h3>Easy Copy</h3>
                <p>One-click copy to clipboard functionality</p>
            </div>
        </div>
    </div>

    <div class="toast" id="toast"></div>

    <script>
        // DOM Elements
        const sourceText = document.getElementById('source-text');
        const outputText = document.getElementById('output-text');
        const sourceLang = document.getElementById('source-lang');
        const targetLang = document.getElementById('target-lang');
        const translateBtn = document.getElementById('translate-btn');
        const swapBtn = document.getElementById('swap-btn');
        const copyBtn = document.getElementById('copy-btn');
        const clearBtn = document.getElementById('clear-btn');
        const speakSourceBtn = document.getElementById('speak-source');
        const speakTargetBtn = document.getElementById('speak-target');
        const charCount = document.getElementById('char-count');
        const errorMessage = document.getElementById('error-message');
        const toast = document.getElementById('toast');

        let translatedText = '';
        let debounceTimer;

        // Character counter
        sourceText.addEventListener('input', () => {
            const length = sourceText.value.length;
            charCount.textContent = `${length} character${length !== 1 ? 's' : ''}`;
            
            // Auto-translate after user stops typing
            clearTimeout(debounceTimer);
            if (sourceText.value.trim()) {
                debounceTimer = setTimeout(() => {
                    translateText();
                }, 800);
            }
        });

        // Translate function using Google Translate API (via MyMemory as fallback)
        async function translateText() {
            const text = sourceText.value.trim();
            
            if (!text) {
                showError('Please enter text to translate');
                return;
            }

            const source = sourceLang.value;
            const target = targetLang.value;

            if (source === target) {
                outputText.textContent = text;
                translatedText = text;
                return;
            }

            try {
                translateBtn.disabled = true;
                outputText.classList.add('loading');
                outputText.innerHTML = '<div class="spinner"></div>';
                errorMessage.classList.remove('show');

                // Using MyMemory Translation API (free, no API key required)
                const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${source}|${target}`;
                
                const response = await fetch(url);
                const data = await response.json();

                if (data.responseStatus === 200 || data.responseData.translatedText) {
                    translatedText = data.responseData.translatedText;
                    outputText.classList.remove('loading');
                    outputText.textContent = translatedText;
                } else {
                    throw new Error('Translation failed');
                }
            } catch (error) {
                outputText.classList.remove('loading');
                outputText.textContent = 'Translation failed. Please try again.';
                showError('Translation error: ' + error.message);
            } finally {
                translateBtn.disabled = false;
            }
        }

        // Translate button click
        translateBtn.addEventListener('click', translateText);

        // Enter key to translate
        sourceText.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                translateText();
            }
        });

        // Swap languages
        swapBtn.addEventListener('click', () => {
            const tempLang = sourceLang.value;
            sourceLang.value = targetLang.value;
            targetLang.value = tempLang;

            const tempText = sourceText.value;
            sourceText.value = translatedText;
            outputText.textContent = tempText;
            translatedText = tempText;

            charCount.textContent = `${sourceText.value.length} characters`;
        });

        // Copy to clipboard
        copyBtn.addEventListener('click', async () => {
            if (!translatedText) return;

            try {
                await navigator.clipboard.writeText(translatedText);
                copyBtn.classList.add('copied');
                copyBtn.textContent = '‚úì';
                showToast('Copied to clipboard!');
                
                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.textContent = 'üìã';
                }, 2000);
            } catch (error) {
                showError('Failed to copy text');
            }
        });

        // Clear button
        clearBtn.addEventListener('click', () => {
            sourceText.value = '';
            outputText.textContent = 'Translation will appear here...';
            translatedText = '';
            charCount.textContent = '0 characters';
            errorMessage.classList.remove('show');
        });

        // Text-to-speech
        speakSourceBtn.addEventListener('click', () => {
            speakText(sourceText.value, sourceLang.value);
        });

        speakTargetBtn.addEventListener('click', () => {
            speakText(translatedText, targetLang.value);
        });

        function speakText(text, lang) {
            if (!text) return;
            
            if ('speechSynthesis' in window) {
                window.speechSynthesis.cancel();
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = lang;
                utterance.rate = 0.9;
                window.speechSynthesis.speak(utterance);
            } else {
                showError('Text-to-speech is not supported in your browser');
            }
        }

        // Show error message
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.add('show');
            setTimeout(() => {
                errorMessage.classList.remove('show');
            }, 5000);
        }

        // Show toast notification
        function showToast(message) {
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Auto-translate on language change
        sourceLang.addEventListener('change', () => {
            if (sourceText.value.trim()) {
                translateText();
            }
        });

        targetLang.addEventListener('change', () => {
            if (sourceText.value.trim()) {
                translateText();
            }
        });
    </script>
</body>
</html>
