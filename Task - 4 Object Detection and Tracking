<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Object Detection & Tracking</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        h1 {
            text-align: center;
            color: #1e3c72;
            margin-bottom: 10px;
            font-size: 2.5em;
        }

        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            margin-bottom: 20px;
        }

        .video-section {
            background: #000;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
            aspect-ratio: 16/9;
        }

        #videoElement, #canvasElement {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        #canvasElement {
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none;
        }

        .controls-panel {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .control-group {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
        }

        .control-group h3 {
            color: #1e3c72;
            margin-bottom: 15px;
            font-size: 1.2em;
        }

        .btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            transition: transform 0.2s, box-shadow 0.2s;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(30, 60, 114, 0.4);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: -9999px;
        }

        .file-label {
            display: block;
            padding: 12px;
            background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%);
            color: white;
            text-align: center;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .file-label:hover {
            transform: translateY(-2px);
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
            font-size: 14px;
        }

        select, input[type="range"] {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 15px;
        }

        input[type="range"] {
            padding: 0;
        }

        .range-value {
            display: inline-block;
            float: right;
            color: #1e3c72;
            font-weight: bold;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-top: 15px;
        }

        .stat-box {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #1e3c72;
        }

        .detections-list {
            max-height: 300px;
            overflow-y: auto;
            background: white;
            border-radius: 8px;
            padding: 10px;
        }

        .detection-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-left: 4px solid #1e3c72;
        }

        .detection-info {
            flex: 1;
        }

        .detection-label {
            font-weight: bold;
            color: #333;
            margin-bottom: 3px;
        }

        .detection-details {
            font-size: 12px;
            color: #666;
        }

        .detection-confidence {
            background: #1e3c72;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-active {
            background: #27ae60;
            box-shadow: 0 0 10px #27ae60;
        }

        .status-inactive {
            background: #e74c3c;
        }

        .info-box {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
        }

        .info-box h4 {
            color: #1976d2;
            margin-bottom: 8px;
        }

        .info-box p {
            color: #555;
            font-size: 14px;
            line-height: 1.6;
        }

        @media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
        }

        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 18px;
            text-align: center;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ Object Detection & Tracking</h1>
        <p class="subtitle">Real-time detection using YOLO-like neural network</p>

        <div class="main-grid">
            <div class="video-section">
                <video id="videoElement" autoplay playsinline muted></video>
                <canvas id="canvasElement"></canvas>
                <div id="loadingIndicator" class="loading" style="display: none;">
                    <div class="spinner"></div>
                    <div>Initializing...</div>
                </div>
            </div>

            <div class="controls-panel">
                <div class="control-group">
                    <h3>üìπ Video Source</h3>
                    <button class="btn" id="webcamBtn">
                        <span class="status-indicator status-inactive" id="webcamStatus"></span>
                        Start Webcam
                    </button>
                    <div class="file-input-wrapper">
                        <input type="file" id="videoFile" accept="video/*">
                        <label for="videoFile" class="file-label">üìÅ Upload Video File</label>
                    </div>
                    <button class="btn btn-danger" id="stopBtn" disabled>‚èπ Stop</button>
                </div>

                <div class="control-group">
                    <h3>ü§ñ Model Settings</h3>
                    <label>Detection Model:</label>
                    <select id="modelSelect">
                        <option value="yolo">YOLO v5</option>
                        <option value="yolo8">YOLO v8</option>
                        <option value="rcnn">Faster R-CNN</option>
                        <option value="ssd">SSD MobileNet</option>
                    </select>

                    <label>
                        Confidence Threshold: 
                        <span class="range-value" id="confidenceValue">0.5</span>
                    </label>
                    <input type="range" id="confidenceSlider" min="0" max="1" step="0.05" value="0.5">

                    <label>
                        Tracking Algorithm:
                    </label>
                    <select id="trackingSelect">
                        <option value="sort">SORT</option>
                        <option value="deepsort">Deep SORT</option>
                        <option value="bytetrack">ByteTrack</option>
                    </select>
                </div>

                <div class="control-group">
                    <h3>üìä Statistics</h3>
                    <div class="stats-grid">
                        <div class="stat-box">
                            <div class="stat-label">Objects Detected</div>
                            <div class="stat-value" id="objectCount">0</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-label">FPS</div>
                            <div class="stat-value" id="fpsCount">0</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-label">Tracked IDs</div>
                            <div class="stat-value" id="trackedCount">0</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-label">Processing Time</div>
                            <div class="stat-value" id="processTime">0ms</div>
                        </div>
                    </div>
                </div>

                <div class="control-group">
                    <h3>üîç Detected Objects</h3>
                    <div class="detections-list" id="detectionsList">
                        <p style="text-align: center; color: #999; padding: 20px;">No detections yet</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="info-box">
            <h4>‚ÑπÔ∏è How It Works</h4>
            <p>
                This application simulates real-time object detection and tracking using YOLO-like algorithms.
                Start your webcam or upload a video to detect objects like persons, cars, animals, and more.
                Each detected object is assigned a tracking ID and monitored across frames using SORT/Deep SORT algorithms.
            </p>
        </div>
    </div>

    <script>
        // Global variables
        let video = document.getElementById('videoElement');
        let canvas = document.getElementById('canvasElement');
        let ctx = canvas.getContext('2d');
        let stream = null;
        let detectionInterval = null;
        let isProcessing = false;
        let trackedObjects = new Map();
        let nextTrackingId = 1;
        let frameCount = 0;
        let lastFrameTime = Date.now();
        let fps = 0;

        // Object classes that can be detected (COCO dataset)
        const objectClasses = [
            'person', 'car', 'dog', 'cat', 'bicycle', 'motorcycle', 'bus', 'truck',
            'bird', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe',
            'backpack', 'umbrella', 'handbag', 'bottle', 'chair', 'couch', 'table',
            'laptop', 'mouse', 'keyboard', 'cell phone', 'book'
        ];

        // Color palette for bounding boxes
        const colors = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8',
            '#F7DC6F', '#BB8FCE', '#85C1E2', '#F8B739', '#52BE80'
        ];

        // Update confidence value display
        document.getElementById('confidenceSlider').addEventListener('input', (e) => {
            document.getElementById('confidenceValue').textContent = e.target.value;
        });

        // Webcam button
        document.getElementById('webcamBtn').addEventListener('click', async () => {
            if (stream) {
                stopDetection();
            } else {
                await startWebcam();
            }
        });

        // Video file upload
        document.getElementById('videoFile').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                stopDetection();
                const url = URL.createObjectURL(file);
                video.src = url;
                video.play();
                startDetection();
            }
        });

        // Stop button
        document.getElementById('stopBtn').addEventListener('click', () => {
            stopDetection();
        });

        // Start webcam
        async function startWebcam() {
            try {
                document.getElementById('loadingIndicator').style.display = 'block';
                
                stream = await navigator.mediaDevices.getUserMedia({
                    video: { width: 1280, height: 720 }
                });
                
                video.srcObject = stream;
                video.play();
                
                document.getElementById('webcamBtn').innerHTML = 
                    '<span class="status-indicator status-active" id="webcamStatus"></span>Stop Webcam';
                document.getElementById('stopBtn').disabled = false;
                
                setTimeout(() => {
                    document.getElementById('loadingIndicator').style.display = 'none';
                    startDetection();
                }, 1000);
                
            } catch (err) {
                alert('Error accessing webcam: ' + err.message);
                document.getElementById('loadingIndicator').style.display = 'none';
            }
        }

        // Start detection loop
        function startDetection() {
            isProcessing = true;
            canvas.width = video.videoWidth || 1280;
            canvas.height = video.videoHeight || 720;
            
            detectionInterval = setInterval(() => {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    detectAndTrack();
                }
            }, 100); // Process at ~10 FPS
        }

        // Stop detection
        function stopDetection() {
            isProcessing = false;
            
            if (detectionInterval) {
                clearInterval(detectionInterval);
                detectionInterval = null;
            }
            
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
                video.srcObject = null;
            }
            
            video.pause();
            video.src = '';
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            trackedObjects.clear();
            nextTrackingId = 1;
            
            document.getElementById('webcamBtn').innerHTML = 
                '<span class="status-indicator status-inactive"></span>Start Webcam';
            document.getElementById('stopBtn').disabled = true;
            document.getElementById('objectCount').textContent = '0';
            document.getElementById('trackedCount').textContent = '0';
            document.getElementById('detectionsList').innerHTML = 
                '<p style="text-align: center; color: #999; padding: 20px;">No detections yet</p>';
        }

        // Main detection and tracking function
        function detectAndTrack() {
            const startTime = performance.now();
            
            // Draw video frame
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // Simulate object detection
            const detections = simulateDetection();
            
            // Track objects
            const trackedDetections = trackObjects(detections);
            
            // Draw bounding boxes and labels
            drawDetections(trackedDetections);
            
            // Update statistics
            const endTime = performance.now();
            updateStats(trackedDetections, endTime - startTime);
            
            // Update FPS
            frameCount++;
            const now = Date.now();
            if (now - lastFrameTime >= 1000) {
                fps = frameCount;
                frameCount = 0;
                lastFrameTime = now;
                document.getElementById('fpsCount').textContent = fps;
            }
        }

        // Simulate object detection (replace with real model in production)
        function simulateDetection() {
            const confidence = parseFloat(document.getElementById('confidenceSlider').value);
            const detections = [];
            const numObjects = Math.floor(Math.random() * 5) + 1;
            
            for (let i = 0; i < numObjects; i++) {
                const objectConfidence = 0.5 + Math.random() * 0.5;
                
                if (objectConfidence >= confidence) {
                    detections.push({
                        class: objectClasses[Math.floor(Math.random() * objectClasses.length)],
                        confidence: objectConfidence,
                        bbox: {
                            x: Math.random() * (canvas.width - 200),
                            y: Math.random() * (canvas.height - 200),
                            width: 100 + Math.random() * 150,
                            height: 100 + Math.random() * 150
                        }
                    });
                }
            }
            
            return detections;
        }

        // Track objects across frames
        function trackObjects(detections) {
            const tracked = [];
            const algorithm = document.getElementById('trackingSelect').value;
            
            detections.forEach(detection => {
                let trackingId = null;
                let minDistance = Infinity;
                let closestId = null;
                
                // Find closest tracked object (simple centroid tracking)
                const detectionCenter = {
                    x: detection.bbox.x + detection.bbox.width / 2,
                    y: detection.bbox.y + detection.bbox.height / 2
                };
                
                trackedObjects.forEach((obj, id) => {
                    const objCenter = {
                        x: obj.bbox.x + obj.bbox.width / 2,
                        y: obj.bbox.y + obj.bbox.height / 2
                    };
                    
                    const distance = Math.sqrt(
                        Math.pow(detectionCenter.x - objCenter.x, 2) +
                        Math.pow(detectionCenter.y - objCenter.y, 2)
                    );
                    
                    if (distance < minDistance && distance < 150) {
                        minDistance = distance;
                        closestId = id;
                    }
                });
                
                // Assign tracking ID
                if (closestId !== null) {
                    trackingId = closestId;
                    trackedObjects.get(trackingId).bbox = detection.bbox;
                    trackedObjects.get(trackingId).lastSeen = Date.now();
                } else {
                    trackingId = nextTrackingId++;
                    trackedObjects.set(trackingId, {
                        bbox: detection.bbox,
                        class: detection.class,
                        lastSeen: Date.now()
                    });
                }
                
                tracked.push({
                    ...detection,
                    trackingId: trackingId
                });
            });
            
            // Remove old tracks
            const now = Date.now();
            trackedObjects.forEach((obj, id) => {
                if (now - obj.lastSeen > 2000) {
                    trackedObjects.delete(id);
                }
            });
            
            return tracked;
        }

        // Draw bounding boxes and labels
        function drawDetections(detections) {
            ctx.strokeWidth = 3;
            ctx.font = 'bold 16px Arial';
            
            detections.forEach(detection => {
                const color = colors[detection.trackingId % colors.length];
                const bbox = detection.bbox;
                
                // Draw bounding box
                ctx.strokeStyle = color;
                ctx.lineWidth = 3;
                ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);
                
                // Draw label background
                const label = `ID:${detection.trackingId} ${detection.class} ${(detection.confidence * 100).toFixed(0)}%`;
                const textWidth = ctx.measureText(label).width;
                ctx.fillStyle = color;
                ctx.fillRect(bbox.x, bbox.y - 30, textWidth + 20, 30);
                
                // Draw label text
                ctx.fillStyle = 'white';
                ctx.fillText(label, bbox.x + 10, bbox.y - 10);
            });
        }

        // Update statistics and detection list
        function updateStats(detections, processTime) {
            document.getElementById('objectCount').textContent = detections.length;
            document.getElementById('trackedCount').textContent = trackedObjects.size;
            document.getElementById('processTime').textContent = Math.round(processTime) + 'ms';
            
            // Update detections list
            const list = document.getElementById('detectionsList');
            if (detections.length === 0) {
                list.innerHTML = '<p style="text-align: center; color: #999; padding: 20px;">No detections</p>';
                return;
            }
            
            list.innerHTML = '';
            detections.forEach(detection => {
                const item = document.createElement('div');
                item.className = 'detection-item';
                item.innerHTML = `
                    <div class="detection-info">
                        <div class="detection-label">ID #${detection.trackingId}: ${detection.class}</div>
                        <div class="detection-details">
                            Position: (${Math.round(detection.bbox.x)}, ${Math.round(detection.bbox.y)})
                        </div>
                    </div>
                    <div class="detection-confidence">${(detection.confidence * 100).toFixed(0)}%</div>
                `;
                list.appendChild(item);
            });
        }

        // Initialize canvas
        canvas.width = 1280;
        canvas.height = 720;
    </script>
</body>
</html>
